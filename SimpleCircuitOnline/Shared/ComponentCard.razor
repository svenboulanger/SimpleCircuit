@using SimpleCircuit;
@using System.IO;
@using System.Xml;

<div class="card" style="width: 12.5rem; margin: 5px;">
    <div class="card-header">@Key<span class="text-muted small">name</span></div>
    <div class="card-img-top" style="background-color: #eeeeee; text-align: center; padding: 5px; min-height: 80px; line-height: 80px;">
        @((MarkupString)CreateSvg(Component))
    </div>
    <ul class="list-group list-group-flush">
        <li class="list-group-item p-1">@Name</li>
        @if (GetProperties(Component).Any())
        {
        <li class="list-group-item p-1">
            <h6>Properties</h6>
            @foreach (var name in GetProperties(Component))
            {
                <span class="badge badge-secondary">@name</span>
            }
        </li>
        }
    </ul>
    @if (Component.Pins.Count > 0)
    {
        <ul class="list-group list-group-flush">
            @for (var i = 0; i < Component.Pins.Count; i++)
            {
                <li class="list-group-item p-1">
                    @foreach (var name in Component.Pins.NamesOf(Component.Pins[i]))
                    {
                        <span class="badge badge-dark">@name</span>
                    }
                    <p class="m-0">@Component.Pins[i].Description</p>
                </li>
            }
        </ul>
    }
</div>

@code {
    [Parameter]
    public string Key { get; set; }

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public SimpleCircuit.Components.IDrawable Component { get; set; }

    private string CreateSvg(SimpleCircuit.Components.IDrawable component)
    {
        if (component == null)
            return "";

        var drawing = new SvgDrawing();
        component.Render(drawing);
        drawing.Style = GraphicalCircuit.DefaultStyle;
        var doc = drawing.GetDocument();

        using var sw = new StringWriter();
        using (var xml = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = true }))
            doc.WriteTo(xml);
        return sw.ToString();
    }

    private IEnumerable<string> GetProperties(SimpleCircuit.Components.IDrawable component)
    {
        if (component == null)
            yield break;
        foreach (var p in component.GetType().GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public))
        {
            var type = p.PropertyType;
            string typeName;
            if (type == typeof(double) || type == typeof(int))
                typeName = "number";
            else if (type == typeof(string))
                typeName = "string";
            else if (type == typeof(bool))
                typeName = "boolean";
            else
                continue; // Cannot read...
            if (p.CanRead && p.CanWrite)
                yield return $"{p.Name}: {typeName}";
        }
    }
}
