@using SimpleCircuit;
@using System.IO;
@using System.Xml;
@using System.Reflection; 
@using SimpleCircuit.Components;

<div class="@TopLevelClasses">
    <div class="mh-100 p-2 d-flex flex-column justify-content-center" style="background-color: #eee;">
        <div class="p-0 m-0 text-center" style="min-width: @(MaxPreviewWidth)px;">
            @((MarkupString)CreateSvg())
        </div>
    </div>
    <div class="flex-fill p-2">
        <h5>@(Description.Key)<small class="text-muted">name</small></h5>
        <p>@(Description.Name)</p>
        <p>
            <a href="javascript:void(0);" @onclick="x => { _showPins = !_showPins; StateHasChanged(); }" class="btn btn-sm @(_showPins ? "btn-outline-info" : "btn-info")">Pins <span class="badge badge-pill @(_showPins ? "badge-info" : "badge-light")">@(Component.Pins.Count)</span></a>
            <a href="javascript:void(0);" @onclick="x => { _showProperties = !_showProperties; StateHasChanged(); }" class="btn btn-sm @(_showProperties ? "btn-outline-info" : "btn-info")">Properties <span class="badge badge-pill @(_showProperties ? "badge-info" : "badge-light")">@(Properties.Count)</span></a>
        </p>
        @if (_showPins)
        {
            <dl class="row">
            @foreach (var pin in Component.Pins)
            {
                <dt class="col-sm-4 small"><strong>@(string.Join(", ", Component.Pins.NamesOf(pin)))</strong></dt>
                <dd class="col-sm-8 small">@(pin.Description)</dd>
            }
            </dl>
        }
        @if (_showProperties)
        {
            <dl class="row">
            @foreach (var property in Properties)
            {
                <dt class="col-sm-4 small"><strong>@(property.Item1.Name)</strong></dt>
                <dd class="col-sm-8 small">@(property.Item2)</dd>
            }
            </dl>
        }
    </div>
</div>

@code {
    private const double MaxPreviewWidth = 90;
    private Utility.ComponentDescription _description;
    private IDrawable _component;
    private bool _showPins = false, _showProperties = false;
    private List<(PropertyInfo, string)> _properties;

    [Parameter]
    public string Class { get; set; }

    protected string TopLevelClasses
    {
        get
        {
            var set = new HashSet<string>()
            {
                "bd-callout",
                "p-0",
                "d-flex",
                "flex-row"
            };
            if (!string.IsNullOrWhiteSpace(Class))
            {
                foreach (var nc in Class.Split(' ', StringSplitOptions.RemoveEmptyEntries))
                    set.Add(nc);
            }
            return string.Join(' ', set);
        }
    }

    [Parameter]
    public Utility.ComponentDescription Description
    {
        get => _description;
        set
        {
            _description = value;
            _properties = null;
            _component = null;
            _showPins = false;
            _showProperties = false;
        }
    }


    /// <summary>
    /// Gets the properties of the component.
    /// </summary>
    protected List<(PropertyInfo, string)> Properties
    {
        get
        {
            if (_properties == null && Description != null)
            {
                _properties = new();
                foreach (var p in Description.Type.GetProperties(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public))
                {
                    if (!p.CanRead || !p.CanWrite)
                        continue;
                    if (p.PropertyType != typeof(double)
                        && p.PropertyType != typeof(bool)
                        && p.PropertyType != typeof(string)
                        && p.PropertyType != typeof(int))
                        continue;
                    string description = p.GetCustomAttribute<DescriptionAttribute>()?.Description ?? "";
                    _properties.Add((p, description));
                }
            }
            return _properties;
        } 
    }

    /// <summary>
    /// Gets the component for the specified description.
    /// </summary>
    protected IDrawable Component
    {
        get
        {
            if (_component == null)
            {
                var options = new Options();
                var ctor = Description.Type.GetConstructors().First();
                var ps = ctor.GetParameters();
                if (ps.Length == 2)
                    _component = (IDrawable)ctor.Invoke(new object[] { Description.Name, options });
                else
                    _component = (IDrawable)ctor.Invoke(new object[] { Description.Name });
            }
            return _component;
        }
    }


    private string CreateSvg()
    {
        if (Description == null)
            return "";

        var drawing = new SvgDrawing();
        drawing.Style = GraphicalCircuit.DefaultStyle;
        Component.Render(drawing);
        var doc = drawing.GetDocument();

        // Try to resize the component
        if (!double.TryParse(doc.DocumentElement.GetAttribute("width"), out double w))
            w = 16.0;
        if (!double.TryParse(doc.DocumentElement.GetAttribute("height"), out double h))
            h = 16.0;
        if (w > MaxPreviewWidth)
        {
            h = h / w * MaxPreviewWidth;
            w = MaxPreviewWidth;
        }
        doc.DocumentElement.SetAttribute("width", $"{w:F0}px");
        doc.DocumentElement.SetAttribute("height", $"{h:F0}px");

        using var sw = new StringWriter();
        using (var xml = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = true }))
            doc.WriteTo(xml);

        // Converting to Base 64 allows us to not interfere with any styling going on outside
        return $"<img src=\"data:image/svg+xml;base64,{Convert.ToBase64String(System.Text.Encoding.UTF8.GetBytes(sw.ToString()))}\" />";
    }

    private string GetTypeName(PropertyInfo property)
    {
        var type = property.PropertyType;
        string typeName;
        if (type == typeof(double) || type == typeof(int))
            typeName = "number";
        else if (type == typeof(string))
            typeName = "string";
        else if (type == typeof(bool))
            typeName = "boolean";
        else
            typeName = "?";
        return typeName;
    }
}
