@using System.IO
@using System.Xml
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

@* https://www.meziantou.net/upload-files-with-drag-drop-or-paste-from-clipboard-in-blazor.htm *@

<div @ref="dropZoneElement" class="@ContainerClasses">
    @ChildContent
    <div class="clearfix">
        <label for="file-upload" class="btn upload">
            <div class="hidden">
                <InputFile OnChange="@OnChange" @ref="inputFile" accept=".svg" id="file-upload" class="d-none" />
            </div>
            Upload
        </label>
        <a href="javascript:void(0);" class="btn download" @onclick="DownloadSVG">Download SVG</a>
    </div>
</div>

@code {
    public class UploadEventArgs : EventArgs
    {
        public string Script { get; set; }
        public string Style { get; set; }
        public string Errors { get; set; }
        public string Warnings { get; set; }
    }

    [Parameter]
    public string Class { get; set; }

    [Parameter]
    public RenderFragment ChildContent { get; set; }

    [Parameter]
    public EventCallback<UploadEventArgs> Upload { get; set; }

    [Parameter]
    public EventCallback<EventArgs> Download { get; set; }

    protected string ContainerClasses
    {
        get
        {
            var set = new HashSet<string>() { "dropzone" };
            if (!string.IsNullOrWhiteSpace(Class))
            {
                foreach (string nc in Class.Split(' ', StringSplitOptions.RemoveEmptyEntries))
                    set.Add(nc);
            }
            return string.Join(' ', set);
        }
    }

    ElementReference dropZoneElement;
    InputFile inputFile;

    IJSObjectReference _module;
    IJSObjectReference _dropZoneInstance;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load the JS file
            _module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/dropzone.js");

            // Initialize the drop zone
            _dropZoneInstance = await _module.InvokeAsync<IJSObjectReference>("initializeFileDropZone", dropZoneElement, inputFile.Element);
        }
    }

    // Called when a new file is uploaded
    protected async Task OnChange(InputFileChangeEventArgs e)
    {
        using var stream = e.File.OpenReadStream();
        using var ms = new MemoryStream();
        await stream.CopyToAsync(ms);
        string content = System.Text.Encoding.UTF8.GetString(ms.ToArray());

        var doc = new XmlDocument();
        var args = new UploadEventArgs();
        try
        {
            doc.LoadXml(content);
        }
        catch (XmlException)
        {
            args.Errors = "Invalid XML data found in uploaded SVG file.";
            await Upload.InvokeAsync(args);
            return;
        }

        // Search for the script
        StringWriter swScript = new();
        foreach (XmlNode node in doc.DocumentElement.GetElementsByTagName("sc:script"))
        {
            if (node.ChildNodes.Count == 1 && node.ChildNodes[0] is System.Xml.XmlCDataSection cdata)
                swScript.WriteLine(cdata.Data);
            else
                swScript.WriteLine(node.InnerText);
        }

        // Search for the style
        StringWriter swStyle = new();
        foreach (XmlNode node in doc.DocumentElement.GetElementsByTagName("style"))
            swStyle.WriteLine(node.InnerText);

        // Call the event
        args.Script = swScript.ToString();
        args.Style = swStyle.ToString();
        if (args.Script.Length == 0)
            args.Errors = "No SimpleCircuit script metadata found in uploaded SVG file.";
        else if (args.Style.Length == 0)
            args.Warnings = "No styling information found in uploaded SVG file.";
        await Upload.InvokeAsync(args);
    }

    protected async Task DownloadSVG()
    {
        var args = new EventArgs();
        await Download.InvokeAsync(args);
    }

    // Unregister the drop zone events
    public async ValueTask DisposeAsync()
    {
        if (_dropZoneInstance != null)
        {
            await _dropZoneInstance.InvokeVoidAsync("dispose");
            await _dropZoneInstance.DisposeAsync();
        }

        if (_module != null)
        {
            await _module.DisposeAsync();
        }
    }
}