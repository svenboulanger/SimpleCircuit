@page "/"
@using System.IO;
@using System.Xml;
@using System.Timers;
@using System.Text.Json
@using SimpleCircuitOnline.Shared
@inject IJSRuntime Runtime 

<div class="split-screen">
    <div class="input-script card">
        <div class="card-header">
            Circuit
        </div>
        <div class="card-body">
            <MonacoEditor @ref="_scriptEditor" Id="script-editor" CssClass="full-height border" OnDidChangeModelContent="Update" ConstructionOptions="GetStyleOptions" />
        </div>
    </div>
    <div class="input-style card">
        <div class="card-header">
            Style (CSS)
        </div>
        <div class="card-body">
            <MonacoEditor @ref="_styleEditor" Id="style-editor" CssClass="full-height border" OnDidChangeModelContent="Update" ConstructionOptions="GetStyleOptions" />
        </div>
    </div>
    <div class="svg-output">
        <SvgOutput Svg="@_svg" Loading="_loading" />
        <Errors Error="@_errors" Warning="@_warnings" />
        <div class="clearfix">
            <a href="javascript:void(0);" class="btn btn-primary float-right m-1" @onclick="DownloadSvg">Download SVG</a>
            <a href="javascript:void(0);" class="btn btn-secondary float-right m-1" @onclick="@(x => _showHelp = !_showHelp)">@(_showHelp ? "Hide components" : "Show components")</a>
            <a href="javascript:void(0);" class="btn btn-secondary float-right m-1" @onclick="@(x => _showOptions = !_showOptions)">@(_showOptions ? "Hide global options" : "Show global options")</a>
            <a href="javascript:void(0);" class="btn btn-secondary float-right m-1" @onclick="@(x => _showDemo = !_showDemo)">@(_showDemo ? "Hide demo's" : "Show demo's")</a>
        </div>
        <GlobalOptionList Show="_showOptions" Editor="_scriptEditor" />
        <DemoList Show="_showDemo" DemoSelected="@(x => { _scriptEditor.SetValue(x); })" />
        <ComponentHelp Show="_showHelp" />
    </div>
</div>

@code
{
    private string _svg, _errors, _warnings;
    private Timer _timer;
    private Task _task = null;
    private bool _showHelp = false, _showDemo = false, _showOptions = false;
    private int _loading;
    private MonacoEditor _scriptEditor, _styleEditor;
    private TextFormatter _jsTextFormatter;

    private StandaloneEditorConstructionOptions GetStyleOptions(MonacoEditor editor)
    {
        return new StandaloneEditorConstructionOptions
        {
            AutomaticLayout = true,
            Language = "text/css",
            WordWrap = "on"
        };
    }

    private void Update(ModelContentChangedEvent e)
    {
        _timer.Stop();
        _timer.Start();
        if (_loading == 0)
            _loading = 1;
    }

    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        // This text formatter will invoke a JavaScript method that uses getBBox() to measure a text size
        _jsTextFormatter = new TextFormatter((text, size) =>
        {
            JsonElement obj = ((IJSInProcessRuntime)Runtime).Invoke<JsonElement>("calculateBounds", text, size);
            double x = obj.GetProperty("x").GetDouble();
            double y = obj.GetProperty("y").GetDouble();
            double width = obj.GetProperty("width").GetDouble();
            double height = obj.GetProperty("height").GetDouble();
            return new(x, y, x + width, y + height);
        });

        _timer = new Timer(750);
        _timer.Elapsed += OnTimerElapsed;
        _timer.AutoReset = false;

        // Register our own language
        // Find all the keys
        List<string> keys = new();
        foreach (var component in Utility.Components(typeof(Utility).Assembly))
            keys.Add(component.Key);
        await Runtime.InvokeVoidAsync("registerLanguage", new object[] { keys.ToArray() });
        var model = await _scriptEditor.GetModel();
        await MonacoEditor.SetModelLanguage(model, "simpleCircuit");
        await MonacoEditorBase.SetTheme("simpleCircuitTheme");

        // Set the default values
        await _scriptEditor.SetValue(Demo.Demos[0].Code);
        await _styleEditor.SetValue(GraphicalCircuit.DefaultStyle);
        await RenderPreview();
    }

    public async Task DownloadSvg()
    {
        var doc = await ComputeXml(includeScript: true);
        using var sw = new StringWriter();
        using (var xml = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = false }))
            doc.WriteTo(xml);
        byte[] file = System.Text.Encoding.UTF8.GetBytes(sw.ToString());
        await Runtime.InvokeVoidAsync("BlazorDownloadFile", "circuit.svg", "text/plain", file);
    }

    private void OnTimerElapsed(object sender, ElapsedEventArgs e)
    {
        // If another task is still running, restart the timer
        if (_loading > 1)
        {
            _timer.Stop();
            _timer.Start();
        }
        else
        {
            _loading = 2;
            StateHasChanged();
            _timer.Stop();
            _task =
                Task.Run(RenderPreview)
                .ContinueWith(task => { _loading = 0; StateHasChanged(); });
        }
    }

    private async Task RenderPreview()
    {
        var doc = await ComputeXml(includeScript: false);
        if (doc != null)
        {
            using var sw = new StringWriter();
            using (var xml = XmlWriter.Create(sw, new XmlWriterSettings { OmitXmlDeclaration = true }))
                doc.WriteTo(xml);
            _svg = sw.ToString();
        }
        else
            _svg = null;
    }

    private async Task<XmlDocument> ComputeXml(bool includeScript)
    {
        _errors = null;
        _warnings = null;
        var logger = new Logger();
        try
        {
            var code = await _scriptEditor.GetValue();
            var context = new SimpleCircuit.Parser.ParsingContext();
            context.Diagnostics = logger;

            // Parse the script
            var lexer = new SimpleCircuit.Parser.Lexer(code);
            SimpleCircuit.Parser.Parser.Parse(lexer, context);
            var ckt = context.Circuit;

            // Include XML data
            if (includeScript)
                ckt.Metadata.Add("script", code);
            ckt.Style = await _styleEditor.GetValue();

            // This makes sure that the text formatter (that will compute text sizes),
            // uses the right style
            await Runtime.InvokeVoidAsync("updateStyle", ckt.Style);

            if (ckt.Count > 0)
            {
                var doc = ckt.Render(logger, _jsTextFormatter);
                return doc;
            }
            else
                return null;
        }
        catch (Exception ex)
        {
            logger.Post(new SimpleCircuit.Diagnostics.DiagnosticMessage(SimpleCircuit.Diagnostics.SeverityLevel.Error,
                "?", ex.Message));
        }
        _errors = logger.Error.ToString();
        _warnings = logger.Warning.ToString();
        return null;
    }
}